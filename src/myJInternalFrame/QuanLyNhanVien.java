/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package myJInternalFrame;

import connectionSQL.connectionSQL;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import myClass.ClassNhanVien;

/**
 *
 * @author markhyun
 */
public class QuanLyNhanVien extends javax.swing.JInternalFrame {

    int index = 0;
    List<ClassNhanVien> listNhanVien = new ArrayList<>();
    Connection cn;

    public QuanLyNhanVien() {
        initComponents();
        cn = connectionSQL.ketnoi(title);

        fillToTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        kGradientPanel4 = new keeptoo.KGradientPanel();
        lbMaNV = new javax.swing.JLabel();
        txtMaNV = new javax.swing.JTextField();
        lbTenNV = new javax.swing.JLabel();
        txtTenNV = new javax.swing.JTextField();
        lbSoDT = new javax.swing.JLabel();
        txtSoDT = new javax.swing.JTextField();
        lbDiaChi = new javax.swing.JLabel();
        cpDiaChi = new javax.swing.JScrollPane();
        txtDiaChi = new javax.swing.JTextArea();
        cpQLNV = new javax.swing.JScrollPane();
        tbQLNV = new javax.swing.JTable();
        pnButton = new javax.swing.JPanel();
        btnThemnv = new javax.swing.JButton();
        btnSuaNhanVien = new javax.swing.JButton();
        btnTimkiemnv = new javax.swing.JButton();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);

        kGradientPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Quản lý nhân viên", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Monospaced", 1, 48), new java.awt.Color(255, 255, 255))); // NOI18N
        kGradientPanel4.setkEndColor(new java.awt.Color(229, 189, 240));
        kGradientPanel4.setkGradientFocus(1000);
        kGradientPanel4.setkStartColor(new java.awt.Color(168, 168, 233));

        lbMaNV.setFont(new java.awt.Font("Monospaced", 1, 24)); // NOI18N
        lbMaNV.setForeground(new java.awt.Color(252, 244, 252));
        lbMaNV.setText("Mã nhân viên:");

        txtMaNV.setFont(new java.awt.Font("Monospaced", 0, 24)); // NOI18N
        txtMaNV.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtMaNVActionPerformed(evt);
            }
        });

        lbTenNV.setFont(new java.awt.Font("Monospaced", 1, 24)); // NOI18N
        lbTenNV.setForeground(new java.awt.Color(252, 244, 252));
        lbTenNV.setText("Tên nhân viên:");

        txtTenNV.setFont(new java.awt.Font("Monospaced", 0, 24)); // NOI18N

        lbSoDT.setFont(new java.awt.Font("Monospaced", 1, 24)); // NOI18N
        lbSoDT.setForeground(new java.awt.Color(252, 244, 252));
        lbSoDT.setText("Số điện thoại:");

        txtSoDT.setFont(new java.awt.Font("Monospaced", 0, 24)); // NOI18N

        lbDiaChi.setFont(new java.awt.Font("Monospaced", 1, 24)); // NOI18N
        lbDiaChi.setForeground(new java.awt.Color(252, 244, 252));
        lbDiaChi.setText("      Địa chỉ:");

        txtDiaChi.setColumns(20);
        txtDiaChi.setFont(new java.awt.Font("Monospaced", 0, 24)); // NOI18N
        txtDiaChi.setRows(5);
        cpDiaChi.setViewportView(txtDiaChi);

        tbQLNV.setFont(new java.awt.Font("Monospaced", 0, 24)); // NOI18N
        tbQLNV.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Mã nhân viên", "Tên nhân viên", "Số điện thoại", "Địa chỉ"
            }
        ));
        tbQLNV.setFillsViewportHeight(true);
        tbQLNV.setRowHeight(35);
        tbQLNV.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbQLNVMouseClicked(evt);
            }
        });
        cpQLNV.setViewportView(tbQLNV);

        pnButton.setOpaque(false);
        pnButton.setLayout(new java.awt.GridBagLayout());

        btnThemnv.setFont(new java.awt.Font("Monospaced", 1, 24)); // NOI18N
        btnThemnv.setForeground(new java.awt.Color(72, 61, 139));
        btnThemnv.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Add_32x32.png"))); // NOI18N
        btnThemnv.setText("Thêm nhân viên");
        btnThemnv.setMaximumSize(new java.awt.Dimension(257, 41));
        btnThemnv.setMinimumSize(new java.awt.Dimension(257, 41));
        btnThemnv.setPreferredSize(new java.awt.Dimension(293, 41));
        btnThemnv.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnThemnvActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 20, 0);
        pnButton.add(btnThemnv, gridBagConstraints);

        btnSuaNhanVien.setFont(new java.awt.Font("Monospaced", 1, 24)); // NOI18N
        btnSuaNhanVien.setForeground(new java.awt.Color(72, 61, 139));
        btnSuaNhanVien.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Edit_32x32.png"))); // NOI18N
        btnSuaNhanVien.setText("Sửa thông tin NV");
        btnSuaNhanVien.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSuaNhanVienActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 20, 0);
        pnButton.add(btnSuaNhanVien, gridBagConstraints);

        btnTimkiemnv.setFont(new java.awt.Font("Monospaced", 1, 24)); // NOI18N
        btnTimkiemnv.setForeground(new java.awt.Color(72, 61, 139));
        btnTimkiemnv.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Search_Icon_32.png"))); // NOI18N
        btnTimkiemnv.setText("Tìm kiếm NV");
        btnTimkiemnv.setPreferredSize(new java.awt.Dimension(293, 41));
        btnTimkiemnv.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTimkiemnvActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        pnButton.add(btnTimkiemnv, gridBagConstraints);

        javax.swing.GroupLayout kGradientPanel4Layout = new javax.swing.GroupLayout(kGradientPanel4);
        kGradientPanel4.setLayout(kGradientPanel4Layout);
        kGradientPanel4Layout.setHorizontalGroup(
            kGradientPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(kGradientPanel4Layout.createSequentialGroup()
                .addGap(148, 148, 148)
                .addGroup(kGradientPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(kGradientPanel4Layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addComponent(lbMaNV, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(lbTenNV)
                    .addComponent(lbSoDT)
                    .addComponent(lbDiaChi))
                .addGap(39, 39, 39)
                .addGroup(kGradientPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(txtSoDT, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtTenNV, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtMaNV, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cpDiaChi, javax.swing.GroupLayout.PREFERRED_SIZE, 380, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(103, 103, 103)
                .addComponent(pnButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(103, 103, 103))
            .addComponent(cpQLNV, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        kGradientPanel4Layout.setVerticalGroup(
            kGradientPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(kGradientPanel4Layout.createSequentialGroup()
                .addGroup(kGradientPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(kGradientPanel4Layout.createSequentialGroup()
                        .addGap(35, 35, 35)
                        .addGroup(kGradientPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lbMaNV, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtMaNV, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(kGradientPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtTenNV, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lbTenNV, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(20, 20, 20)
                        .addGroup(kGradientPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtSoDT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lbSoDT, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(29, 29, 29)
                        .addGroup(kGradientPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lbDiaChi, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cpDiaChi, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(kGradientPanel4Layout.createSequentialGroup()
                        .addGap(57, 57, 57)
                        .addComponent(pnButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 25, Short.MAX_VALUE)
                .addComponent(cpQLNV, javax.swing.GroupLayout.PREFERRED_SIZE, 289, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(kGradientPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(kGradientPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtMaNVActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtMaNVActionPerformed

    }//GEN-LAST:event_txtMaNVActionPerformed

    private void btnThemnvActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnThemnvActionPerformed
        if (this.checkForm()) {
            themNV();
        }
    }//GEN-LAST:event_btnThemnvActionPerformed

    private void tbQLNVMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbQLNVMouseClicked
        this.showDetail();
    }//GEN-LAST:event_tbQLNVMouseClicked

    private void btnSuaNhanVienActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSuaNhanVienActionPerformed
        // TODO add your handling code here:
        this.suaNhanVien();
    }//GEN-LAST:event_btnSuaNhanVienActionPerformed

    private void btnTimkiemnvActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTimkiemnvActionPerformed
        timNV();
    }//GEN-LAST:event_btnTimkiemnvActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnSuaNhanVien;
    private javax.swing.JButton btnThemnv;
    private javax.swing.JButton btnTimkiemnv;
    private javax.swing.JScrollPane cpDiaChi;
    private javax.swing.JScrollPane cpQLNV;
    private keeptoo.KGradientPanel kGradientPanel4;
    private javax.swing.JLabel lbDiaChi;
    private javax.swing.JLabel lbMaNV;
    private javax.swing.JLabel lbSoDT;
    private javax.swing.JLabel lbTenNV;
    private javax.swing.JPanel pnButton;
    private javax.swing.JTable tbQLNV;
    private javax.swing.JTextArea txtDiaChi;
    private javax.swing.JTextField txtMaNV;
    private javax.swing.JTextField txtSoDT;
    private javax.swing.JTextField txtTenNV;
    // End of variables declaration//GEN-END:variables

    private void fillToTable() {
        DefaultTableModel model = (DefaultTableModel) tbQLNV.getModel();
        model.setRowCount(0);

        try {
            listNhanVien.clear();
            Statement st = connectionSQL.ketnoi(title).createStatement();
            String sql = "SELECT * FROM NHANVIEN";
            ResultSet rs = st.executeQuery(sql);

            while (rs.next()) {
                String maNV = rs.getString(1);
                String tenNV = rs.getString(2);
                String soDT = rs.getString(3);
                String diaChi = rs.getString(4);

                ClassNhanVien nv = new ClassNhanVien(maNV, tenNV, soDT, diaChi);
                listNhanVien.add(nv);
            }
            for (int i = 0; i < listNhanVien.size(); i++) {
                Object[] khachHangObject = new Object[]{
                    listNhanVien.get(i).getMaNV(),
                    listNhanVien.get(i).getTenNV(),
                    listNhanVien.get(i).getSdt(),
                    listNhanVien.get(i).getDiaChi()};
                model.addRow(khachHangObject);

            }

        } catch (Exception e) {
            System.out.println(e);
        }
    }

    private void showDetail() {
        try {
            int selectRow = tbQLNV.getSelectedRow();

            ClassNhanVien nv = listNhanVien.get(selectRow);
            txtMaNV.setText(nv.getMaNV());
            txtTenNV.setText(nv.getTenNV());
            txtSoDT.setText(nv.getSdt());
            txtDiaChi.setText(nv.getDiaChi());
        } catch (Exception e) {

        }
    }

    private void themNV() {
        try {
            String sql = "INSERT INTO NHANVIEN\n" + "VALUES(?,?,?,?)";
            PreparedStatement ps = cn.prepareStatement(sql);
            ps.setString(1, txtMaNV.getText());
            ps.setString(2, txtTenNV.getText());
            ps.setString(3, txtSoDT.getText());
            ps.setString(4, txtDiaChi.getText());

            int row = ps.executeUpdate();
            if (row > 0) {
                JOptionPane.showMessageDialog(this, "Thêm nhân viên thành công");
                index = listNhanVien.size() - 1;
                showDetail();
            } else {
                JOptionPane.showMessageDialog(this, "Lỗi thêm");
            }
            ps.close();
            fillToTable();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Thêm nhân viên không thành công");
        }

    }

    private void suaNhanVien() {
        try {
            String sql = "UPDATE NHANVIEN\n"
                    + "set TENNV=?, SDT=?, DIACHI=?\n"
                    + "where MANV=?";

            PreparedStatement ps = cn.prepareStatement(sql);
            ps.setString(4, txtMaNV.getText());
            ps.setString(1, txtTenNV.getText());
            ps.setString(2, txtSoDT.getText());
            ps.setString(3, txtDiaChi.getText());

            int row = ps.executeUpdate();
            if (row > 0) {
                JOptionPane.showMessageDialog(this, "Sửa thông tin nhân viên thành công");
                index = listNhanVien.size() - 1;
                showDetail();
            } else {
                JOptionPane.showMessageDialog(this, "Lỗi Sửa");
            }
            cn.close();
            fillToTable();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Sửa thông tin nhân viên không thành công");
        }
    }


    private void loadTable() {
        DefaultTableModel model = (DefaultTableModel) tbQLNV.getModel();
        model.setRowCount(0);

        for (int i = 0; i < listNhanVien.size(); i++) {
            Object[] objectNV = new Object[]{
                listNhanVien.get(i).getMaNV(),
                listNhanVien.get(i).getTenNV(),
                listNhanVien.get(i).getSdt(),
                listNhanVien.get(i).getDiaChi()};
            model.addRow(objectNV);

        }
    }

    private void timNV() {
        DefaultTableModel model = (DefaultTableModel) tbQLNV.getModel();
        String option[] = {"Tìm theo mã NV", "Tìm theo tên NV", "Tìm theo SĐT NV", "Hủy"};
        ImageIcon iconFind = new ImageIcon("src//icons//Search_Icon_32.png");

        int result = JOptionPane.showOptionDialog(this, "Mời bạn chọn cách thức tìm kiếm!", "Tìm kiếm nhân viên", JOptionPane.YES_NO_OPTION, JOptionPane.INFORMATION_MESSAGE, iconFind, option, null);

        if (result == 0) {
            String maNV = (String) JOptionPane.showInputDialog(this, "Mời bạn nhập mã nhân viên!", "Tìm kiếm bằng mã nhân viên", JOptionPane.INFORMATION_MESSAGE, iconFind, null, null);
            boolean resultInput = false;
            for (int i = 0; i < listNhanVien.size(); i++) {
                if (maNV.equals(listNhanVien.get(i).getMaNV())) {
                    JOptionPane.showMessageDialog(this, "Tìm thấy nhân viên!", "Tìm kiếm", JOptionPane.INFORMATION_MESSAGE, iconFind);
                    resultInput = true;
                    txtMaNV.setText(listNhanVien.get(i).getMaNV());
                    txtTenNV.setText(listNhanVien.get(i).getTenNV());
                    txtSoDT.setText(listNhanVien.get(i).getSdt());
                    txtDiaChi.setText(listNhanVien.get(i).getDiaChi());
                    model.setRowCount(0);

                    Object objectNV[] = new Object[]{
                        listNhanVien.get(i).getMaNV(),
                        listNhanVien.get(i).getTenNV(),
                        listNhanVien.get(i).getSdt(),
                        listNhanVien.get(i).getDiaChi(),};
                    model.addRow(objectNV);
                }
            }
            if (resultInput == false) {
                JOptionPane.showMessageDialog(this, "Không tìm thấy!", "Tìm kiếm", JOptionPane.INFORMATION_MESSAGE, iconFind);
            }
        } else if (result == 1) {
            String tenNV = (String) JOptionPane.showInputDialog(this, "Mời bạn nhập tên nhân viên!", "Tìm kiếm bằng tên nhân viên", JOptionPane.INFORMATION_MESSAGE, iconFind, null, null);
            boolean resultInput = false;
            for (int i = 0; i < listNhanVien.size(); i++) {
                if (tenNV.equals(listNhanVien.get(i).getTenNV())) {
                    JOptionPane.showMessageDialog(this, "Tìm thấy nhân viên!", "Tìm kiếm", JOptionPane.INFORMATION_MESSAGE, iconFind);
                    resultInput = true;
                    txtMaNV.setText(listNhanVien.get(i).getMaNV());
                    txtTenNV.setText(listNhanVien.get(i).getTenNV());
                    txtSoDT.setText(listNhanVien.get(i).getSdt());
                    txtDiaChi.setText(listNhanVien.get(i).getDiaChi());
                    model.setRowCount(0);

                    Object objectNV[] = new Object[]{
                        listNhanVien.get(i).getMaNV(),
                        listNhanVien.get(i).getTenNV(),
                        listNhanVien.get(i).getSdt(),
                        listNhanVien.get(i).getDiaChi(),};
                    model.addRow(objectNV);
                }
            }
            if (resultInput == false) {
                JOptionPane.showMessageDialog(this, "Không tìm thấy!", "Tìm kiếm", JOptionPane.INFORMATION_MESSAGE, iconFind);
            }
        } else if (result == 2) {
            String soDT = (String) JOptionPane.showInputDialog(this, "Mời bạn nhập số điện thoại của nhân viên!", "Tìm kiếm bằng số điện thoại nhân viên", JOptionPane.INFORMATION_MESSAGE, iconFind, null, null);
            boolean resultInput = false;
            for (int i = 0; i < listNhanVien.size(); i++) {
                if (soDT.equals(listNhanVien.get(i).getSdt())) {
                    JOptionPane.showMessageDialog(this, "Tìm thấy nhân viên!", "Tìm kiếm", JOptionPane.INFORMATION_MESSAGE, iconFind);
                    resultInput = true;
                    txtMaNV.setText(listNhanVien.get(i).getMaNV());
                    txtTenNV.setText(listNhanVien.get(i).getTenNV());
                    txtSoDT.setText(listNhanVien.get(i).getSdt());
                    txtDiaChi.setText(listNhanVien.get(i).getDiaChi());
                    model.setRowCount(0);

                    Object objectNV[] = new Object[]{
                        listNhanVien.get(i).getMaNV(),
                        listNhanVien.get(i).getTenNV(),
                        listNhanVien.get(i).getSdt(),
                        listNhanVien.get(i).getDiaChi(),};
                    model.addRow(objectNV);
                }
            }
            if (resultInput == false) {
                JOptionPane.showMessageDialog(this, "Không tìm thấy!", "Tìm kiếm", JOptionPane.INFORMATION_MESSAGE, iconFind);
            }
        }
    }

    public boolean checkForm() {
        boolean tma = false, tten = false, tsdt = false, tdiachi = false;
        //bắt lỗi mã
        if (txtMaNV.getText().length() == 0) {
            JOptionPane.showMessageDialog(this, "Không để trống mã");
            tma = false;
        } else {
            tma = true;
            for (int i = 0; i < listNhanVien.size(); i++) {
                ClassNhanVien nv = listNhanVien.get(i);
                if (txtMaNV.getText().equalsIgnoreCase(nv.getMaNV())) {
                    JOptionPane.showMessageDialog(this, "Trùng mã nhân viên");
                    tma = false;
                    break;
                }
            }
        }

        if (tma) {
            if (txtTenNV.getText().length() == 0) {
                JOptionPane.showMessageDialog(this, "Không để trống tên");
                tten = false;
            } else {
                tten = true;
            }
        }
        //bắt lỗi sdt
        if (tten) {
            if (txtSoDT.getText().length() == 0) {
                JOptionPane.showMessageDialog(this, "Không để trống số điện thoại");
                tsdt = false;
            } else {
                try {
                    int sdt = Integer.parseInt(txtSoDT.getText());
                    String soSDT = String.valueOf(sdt);
                    if (soSDT.length() == 9 && txtSoDT.getText().length() == 10) {
                        tsdt = true;
                    } else {
                        JOptionPane.showMessageDialog(this, "Số điện thoại không đúng");
                        tsdt = false;
                    }
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(this, "Số điện thoại sai định dạng");
                    tsdt = false;
                }
            }
        }
        //bắt lỗi địa chỉ
        if (tsdt) {
            if (txtDiaChi.getText().length() == 0) {
                JOptionPane.showMessageDialog(this, "Không để trống địa chỉ");
                tdiachi = false;
            } else {
                tdiachi = true;
            }
        }
        //trả kết quả
        if (tdiachi) {
            return true;
        } else {
            return false;
        }
    }
}
